openapi: 3.0.0
info:
  title: Aeonaxy Intern Assignment
  description: API documentation using Swagger
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /course/getCourseById/{courseId}:
    get:
      tags: 
        - course
      summary: Get course by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Course information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
  /course:
    get:
      tags: 
        - course
      summary: Get all courses
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int64
        - in: query
          name: pagesize
          schema:
            type: integer
            format: int64
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: level
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
            enum: [Beginner, Intermediate, Advanced]
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      tags: 
        - Admin
      summary: Create a new course
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourse'
      responses:
        '200':
          description: Course created successfully
  /course/{courseId}:
    put:
      tags: 
        - Admin
      summary: Update course by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course updated successfully
    delete:
      tags: 
        - Admin
      summary: Delete course by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Course deleted successfully
  /enrollment:
    post:
      tags: 
        - Course Enroll
      summary: Enroll user in course
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '200':
          description: User enrolled in course successfully
    delete:
      tags: 
        - Course Enroll
      summary: Remove enrollment by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: enrollmentId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Enrollment removed successfully
  /user/getUserById/{userId}:
    get:
      tags: 
        - User
      summary: Get user by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/getAllUser:
    get:
      tags: 
        - Admin
      summary: Get all users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags: 
        - User
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
  /user:
    post:
      tags: 
        - User
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: User registered successfully
    put:
      tags: 
        - User
      summary: Update user information
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User information updated successfully
  /user/upload:
    post:
      tags:
        - User
      summary: Upload profile picture for a user
      description: Uploads a profile picture for a user identified by their user ID.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile:
                  type: string
                  format: binary
                  description: Profile picture file to upload.
      responses:
        '200':
          description: Profile picture uploaded successfully
        '400':
          description: Invalid request body or missing parameters
        '401':
          description: Unauthorized - JWT token is missing or invalid
        '403':
          description: Forbidden - User does not have permission to upload profile picture
        '500':
          description: Internal server error - Failed to upload profile picture
  /user/profile:
    get:
      tags:
        - User
      summary: Get profile picture based on the id from jwt token
      security:
        - ApiKeyAuth: []
      description: |
        Retrieves the profile picture of a user based on the id from jwt token.
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Profile picture not found
        '500':
          description: Failed to retrieve profile picture
components:
  schemas:
    Course:
      type: object
      properties:
        courseId:
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
        level:
          type: string
        popularity:
          type: integer
    CreateCourse:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
        level:
          type: string
        popularity:
          type: integer
    Enrollment:
      type: object
      properties:
        courseId:
          type: integer
        userId:
          type: integer
    User:
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_picture:
          type: string
    RegisterUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_picture:
          type: string
        role:
          type: string
    LoginCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
  securitySchemes:
    ApiKeyAuth: 
      type: apiKey
      in: header 
      name: Authorization
